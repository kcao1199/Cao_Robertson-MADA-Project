---
title: "Data Processing"
author: "Kelly Cao and Rachel Robertson"
date: "2023-01-03"
output: html_document
editor: 
  markdown: 
    wrap: sentence
---

# Setup
I first load the needed packages.
```{r, message = FALSE, warning = FALSE}
library(readr) #Loading the package to read the fwf
library(here) #Loading the package to produce relative pathway
library(knitr) #Loading in the package for dynamic report generation
library(tidyverse)
library(readxl)
library(dplyr)
```

# Data loading
I load the raw .DAT file into the environment and using the `readr` package, I declare the column position and labels of the desired columns of interest. I then apply the declared object with `read_fwf` function to the raw data (.DAT) file into a data frame named `data_frame`.
```{r}
column_position<- fwf_positions(
  start = c(1, 89, 287, 295, 314, 330, 331, 334, 336, 343, 344, 345,
            347, 353, 359, 362, 472, 473, 495, 496, 497, 502, 504, 1296, 1297
  ),
  end = c(5, 92, 288, 295, 329, 330, 332, 334, 336, 343, 344, 346,
          347, 354, 359, 362, 472, 473, 495, 496, 497, 502, 504, 1296, 1297
  ),
  col_names = c("SEQNUMT", "YEAR", "AGE", "EDUC1", "INCPORAR_I", 
                "INCPOV1", "INCQ298A", "LANGUAGE", "MOBIL_1", "RACEETHK", 
                "RACE_K", "RENT_OWN", "SEX", "STATE", "FACILITY", "WELLCHILD", 
                "P_U13HPV", "P_U13HPV3", "P_UTDHPV", "P_UTDHPV_15", 
                "P_UTDHPV_15INT", "P_UTDHPV2", "P_UTDHPV3", "INS_STAT2_I", 
                "INS_BREAK_I")
)
file_path <- here("data", "raw-data", "NISTEENPUF22.DAT")

data_frame <- read_fwf(file_path, 
                       col_positions = column_position,
                       col_types = cols(.default = "c")
                       )
```

# Specifying Factor Variables
With the data_frame in the environment, I nthen apply the labels for each factor levels using the provided codebook (this codebook can be found in ./data/raw_data/NIS-Teen_Puff22-CODEBOOK.pdf). This will make further downstream analysis much easier to work with.
```{r}
EDUC1levels=c(1,2,3,4)
EDUC1labels=c("LESS THAN 12 YEARS", "12 YEARS", "MORE THAN 12 YEARS, NON-COLLEGE GRAD", "COLLEGE GRADUATE")

INCPOVlevels=c(1,2,3,4)
INCPOVlabels=c("ABOVE POVERTY > $75K", "ABOVE POVERTY <= $75K", "BELOW POVERTY", "UNKNOWN")

INCQ298Alevels=c(10,11,12,13,14,3,4,5,6,7,77,8,9,99)
INCQ298Alabels=c("$35001 - $40000", "$40001 - $50000", "$50001 - $60000", "$60001 - $75000", "$75001+", "$0 - $7500", "$7501 - $10000", "$10001 - $17500", "$17501 - $20000", "$20001 - $25000", "DON'T KNOW", "$25001 - $30000", "$30001 - $35000", "REFUSED")

LANGUAGElevels=c(1,2,3)
LANGUAGElabels=c("ENGLISH", "SPANISH", "OTHER")

MOBILlevels=c(1,2,77,98,99)
MOBILlabels=c("MOVED FROM DIFFERENT STATE", "DID NOT MOVE FROM DIFFERENT STATE", "DON'T KNOW", "MISSING IN ERROR", "REFUSED")

RACEETHKlevels=c(1,2,3,4)
RACEETHKlabels=c("HISPANIC", "NON-HISPANIC WHITE ONLY", "NON-HISPANIC BLACK ONLY", "NON-HISPANIC OTHER + MULTIPLE RACE")

RACE_Klevels=c(1,2,3)
RACE_Klabels=c("WHITE ONLY", "BLACK ONLY", "OTHER + MULTIPLE RACE")

RENTOWNlevels=c(1,2,3,77,99)
RENTOWNlabels=c("OWNED OR BEING BOUGHT", "RENTED", "OTHER ARRANGMENT", "DON'T KNOW", "REFUSED")

SEXlevels=c(1,2,77,98,99)
SEXlabels=c("MALE", "FEMALE", "DON'T KNOW", "MISSING IN ERROR", "REFUSED")

STATElevels=c(1,10,11,12,13,15,16,17,18,19,2,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,4,40,41,42,44,45,46,47,48,49,5,50,51,53,54,55,56,6,66,72,78,8,9)
STATElabels=c("ALABAMA", "DELAWARE", "DISTRICT OF COLUMBIA", "FLORIDA", "GEORGIA", "HAWAII", "IDAHO", "ILLINOIS", "INDIANA", "IOWA", "ALASKA", "KANSAS", "KENTUCKY", "LOUISIANA", "MAINE", "MARYLAND", "MASSACHUSETTS", "MICHIGAN", "MINNESOTA", "MISSISSIPPI", "MISSOURI", "MONTANA", "NEBRASKA", "NEVADA",
              "NEW HAMPSHIRE", "NEW JERSEY", "NEW MEXICO", "NEW YORK", "NORTH CAROLINA", "NORTH DAKOTA", "OHIO", "ARIZONA", "OKLAHOMA", "OREGON", "PENNSYLVANIA", "RHODE ISLAND", "SOUTH CAROLINA", "SOUTH DAKOTA", "TENNESSEE", "TEXAS", "UTAH", "ARKANSAS", "VERMONT", "VIRGINIA", "WASHINGTON", "WEST VIRGINIA",
              "WISCONSIN", "WYOMING", "CALIFORNIA", "GUAM", "PUERTO RICO", "U.S. VIRGIN ISLANDS", "COLORADO", "CONNECTICUT")

FACILITYlevels=c(1,2,3,4,5,6, ".")
FACILITYlabels=c("ALL PUBLIC FACILITIES", "ALL HOSPITAL FACILITIES", "ALL PRIVATE FACILITIES", "ALL STD/SCHOOL/TEEN CLINICS OR OTHER FACILITIES", "MIXED", "UNKNOWN", "Missing Data")

WELLCHILDlevels=c(1,2,3)
WELLCHILDlabels=c("YES", "NO", "DON'T KNOW")

UTDlevels=c(0,1, ".")
UTDlabels=c("NOT UTD", "UTD", "Missing Data")

INS_STAT2_Ilevels=c(1,2,3,4, ".")
INS_STAT2_Ilabels=c("PRIVATE INSURANCE ONLY", "ANY MEDICAID", "OTHER INSURANCE (CHIP, IHS, MILITARY, OR OTHER, ALONE OR IN COMB. WITH PRIVATE INSURANCE)", "UNINSURED", "MISSING Data")

INS_BREAK_Ilevels=c(1,2,3,4,".")
INS_BREAK_Ilabels=c("CURRENTLY INSURED BUT UNINSURED AT SOME POINT SINCE AGE 11", "CURRENTLY INSURED AND NEVER UNINSURED SINCE AGE 11", "CURRENTLY UNINSURED BUT INSURED AT SOME POINT SINCE AGE 11", "CURRENTLY UNINSURED AND NEVER INSURED SINCE AGE 11", "Data Missing")

data<-mutate(data_frame,
             SEQNUMT = as.numeric(SEQNUMT), 
             YEAR = as.numeric(YEAR),
             AGE = as.numeric(AGE),
             EDUC1 = factor(EDUC1,levels = EDUC1levels, labels = EDUC1labels),
             INCPORAR_I = as.numeric(INCPORAR_I), 
             INCPOV1 = factor(INCPOV1, levels = INCPOVlevels, labels = INCPOVlabels),
             INCQ298A = factor(INCQ298A, levels = INCQ298Alevels, labels = INCQ298Alabels),             
             LANGUAGE = factor(LANGUAGE, levels = LANGUAGElevels, labels = LANGUAGElabels),
             MOBIL_1 = factor(MOBIL_1, levels = MOBILlevels, labels = MOBILlabels),
             RACEETHK = factor(RACEETHK, levels = RACEETHKlevels, labels = RACEETHKlabels),
             RACE_K = factor(RACE_K, levels = RACE_Klevels, labels = RACE_Klabels),
             RENT_OWN = factor(RENT_OWN, levels = RENTOWNlevels, labels = RENTOWNlabels), 
             SEX = factor(SEX, levels = SEXlevels, labels = SEXlabels),
             STATE = factor(STATE, levels = STATElevels, labels = STATElabels), 
             FACILITY = factor(FACILITY, levels = FACILITYlevels, labels = FACILITYlabels),
             WELLCHILD = factor(WELLCHILD, levels = WELLCHILDlevels, labels = WELLCHILDlabels),
             P_U13HPV = factor(P_U13HPV, levels = UTDlevels, labels = UTDlabels),
             P_U13HPV3 = factor(P_U13HPV3, levels = UTDlevels, labels = UTDlabels),
             P_UTDHPV = factor(P_UTDHPV, levels = UTDlevels, labels = UTDlabels),
             P_UTDHPV_15 = factor(P_UTDHPV_15, levels = UTDlevels, labels = UTDlabels),
             P_UTDHPV_15INT = factor(P_UTDHPV_15INT, levels = UTDlevels, labels = UTDlabels),
             P_UTDHPV2 = factor(P_UTDHPV2, levels = UTDlevels, labels = UTDlabels),
             P_UTDHPV3 = factor(P_UTDHPV3, levels = UTDlevels, labels = UTDlabels),
             INS_STAT2_I = factor(INS_STAT2_I, levels = INS_STAT2_Ilevels, labels = INS_STAT2_Ilabels),
             INS_BREAK_I = factor(INS_BREAK_I, levels = INS_BREAK_Ilevels, labels = INS_BREAK_Ilabels)
)

summary(data)
str(data)

```


# Save data
We then save the data frame into a .rds and a csv file named "NIS_Teen_Data_2022.csv" and "processeddata.rds"
```{r}
output_file<- here("data", "processed-data", "NIS_Teen_Data_2022.csv")
write.csv(data, file = output_file, row.names = FALSE)
save_path <- here("./data/processed-data/processeddata.rds")
saveRDS(data, file = save_path )
```

# Cleaning Data
```{r, warning=FALSE, message=FALSE}
library(here)
library(dplyr)
library(skimr)
library(ggplot2)
library(tidyr)
library(naniar)
```

First, I load the data into a usable data frame.
```{r}
data_location <- here::here("data","processed-data","processeddata.rds")
NISTeenVax <- readRDS(data_location)
```

## Exploring the data
Next, I will check the structure of the data and I will check for any NA or missing values in the data frame.
```{r}
str(NISTeenVax)
dplyr::glimpse(NISTeenVax)
NA_columns <- colSums(is.na(NISTeenVax))
print(NA_columns)


#There are no missing values, but there may be missing data that is filled with a character value within the data frame. I will first find the character value assigned to missing variables by exploring the levels of each variable using the sapply() and then lapply() function.

factor_cols <- sapply(NISTeenVax, is.factor) #Find the columns that are factor variables
factor_levels <- lapply(NISTeenVax[, factor_cols, drop = FALSE], levels) #Find the levels of each factor variable
print(factor_levels)#Print factor levels for only the factor columns

#Several columns contain factor levels that are labelled, "Data missing", "Missing data", "Unknown", "Refused", Missing in error", and "Don't know". I will replace these values for each variable with an NA in R so that they will be counted as missing values for analysis.
```

## Eliminating NA Values and Columns
Several columns contain factor levels that are labelled, "Data missing", "Missing data", "Unknown", "Refused", Missing in error", and "Don't know". I will replace these values for each variable with an NA in R so that they will be counted as missing values for analysis.
```{r}
missing_values <- c("Data Missing", "MISSING Data", "Missing Data", "MISSING IN ERROR") #Group all of the factor levels that indicate a missing value

#After back and forth with ChatGPT3.5, it suggested to use the dplyr mutate function and replace function to specify that factor variables with the levels in the group above will have those level values replaced with NA
NISTeenVax2 <- NISTeenVax %>% #Create new dataframe
  mutate(across(where(is.factor), ~ replace(., . %in% missing_values, NA))) #mutate only at factor variables in the dataframe and replace the levels specified above with NA for those factors

#Now I will be able to check for NA values using the skim() function. I can also display the NA values graphically using gg_miss_var()

skimr::skim(NISTeenVax2)
gg_miss_var(NISTeenVax2)

#The most important factors for this analysis is the response variables called variations of "P_UTDHPV".
#We have 27,024 missing values for each of these columns. These missing values may have come from the same survey type, however analysis cannot be performed when this crucial data is missing. For this reason, I will find the rows where these missing values take place, ensure that they are all the same rows for the multiple variables, and delete these rows specifically.
#I used chatGPT3,5 to find the function to select for certain rows using dplyr and then filter these for NA values
##I prompted it by using the variable names a,b,c and asked for it to select these columns and filter for the rows with missing variables
rows_with_missing_in_all <- NISTeenVax2 %>%
  select("P_U13HPV", "P_U13HPV3", "P_UTDHPV", "P_UTDHPV_15", "P_UTDHPV_15INT", "P_UTDHPV2", "P_UTDHPV3") %>% #select for columns in question
  filter_all(any_vars(is.na(.))) #Find rows with NA values

##I then prompted ChatGPT3.5 to provide me with code to display the location of these rows so that I may check if they all matched.
if (nrow(rows_with_missing_in_all) > 0) {
  print("Rows with missing values in aforementioned variables")
  print(rows_with_missing_in_all)
} else {
  print("No rows with missing values in aforementioned variables")
}


#It seems that all of the missing rows match for all of these variables. This means that we may delete the rows that contain missing values for all of the specified variables.
#Because the variables listed all contain missing values in the same rows, I will select only one variable to filter.

NISTeenVax3 <- NISTeenVax2 %>%
  filter(!is.na(P_UTDHPV)) #drop the rows with NA values in P_UTDHPV
NISTeenVax3 <- NISTeenVax3 %>%
  filter(!is.na(INS_BREAK_I))
NISTeenVax3 <- NISTeenVax3 %>%
  filter(!is.na(FACILITY))

skimr::skim(NISTeenVax3) #check again for missing values in these variables
gg_miss_var(NISTeenVax3)
skimr::skim(NISTeenVax3) #check again for missing values in these variables
gg_miss_var(NISTeenVax3)

#The majority of data is missing from the WELLCHILD column, which indicates whether the teen had receieved a Well Child visit in recent years. Because this is not crucial to out analysis, I will delete this column. 
#The year column in unnecessary, since all values are from the year 2022. So, I will also delete the YEAR column.

NISTeenVax4 <- NISTeenVax3 %>% #create a new data frame for the filtered data
 select(-WELLCHILD, -YEAR) #Use the select() filter to delete multiple columns from the data frame
str(NISTeenVax4) #Check the remaining variables

```

## Saving the Data Frame
Save cleaned data as an RDS file.
```{r}
output_file2<- here("data", "processed-data", "NIS_Teen_Data_2022_clean1.csv")
write.csv(NISTeenVax4, file = output_file2, row.names = FALSE)
saved_pathway <- here("./data/processed-data/cleandata1.rds")
saveRDS(NISTeenVax4, file = saved_pathway )

```
